const findSum = function(array) {
  return array.reduce(function (firstNum, secondNum) {
    return firstNum + secondNum;
  });
};

const findFrequency = function(array) {
  const frequencyCounter = array.reduce((trackingObject, thisString) => {

    let firstTrackingObject = {};
    if (typeof trackingObject === 'string') {
      firstTrackingObject[trackingObject] = 1;
      firstTrackingObject[thisString] = 1;
      return firstTrackingObject;
    }

    if (trackingObject[thisString]) {
      trackingObject[thisString]++;
    } else {
      trackingObject[thisString] = 1;
    }
    return trackingObject;
  });
  
  let most;
  let least;
  for (let property in frequencyCounter) {
    if (most === undefined || frequencyCounter[property] > frequencyCounter[most]) {
      most = property;
    } else if (least === undefined || frequencyCounter[property] < frequencyCounter[least]) {
      least = property;
    }
  }

  return {most: [most], least: [least]};
};

const isPalindrome = function(str) {
  const charArray = str.toLowerCase().split('');
  const palindromeArray = [];
  for (let index = charArray.length - 1; index >= 0; index--) {
    palindromeArray.push(charArray[index]);
  }
  return palindromeArray.join('') === str.toLowerCase();
};

const largestPair = function(array) {
  const prodArray = array.map((num, index, arr) => {
    if (arr[index + 1]) {
      return num * arr[index + 1];
    }
  });

  return prodArray.find((num, index, array) => {
      return array.slice(0, -1).every(item => item <= num);
  });
};

const removeParenth = function(str) {
  const characters = str.split('');
  const newCharacters = [];
  let include = true;

  characters.forEach(char => {
    if (char === '(') {
      include = false;
    }
    if (include) {
      newCharacters.push(char);
    } else if (char === ')') {
      include = true;
    }
  });

  return newCharacters.join('');
};

const scoreScrabble = function(str) {
  const ranking = {
    1: ['a', 'e', 'i', 'o', 'u', 'l', 'n', 'r', 's', 't'],
    2: ['d', 'g'],
    3: ['b', 'c', 'm', 'p'],
    4: ['f', 'h', 'v', 'w', 'y'],
    5: ['k'],
    8: ['j', 'x'],
    10: ['q', 'z']
  };

  let total = 0;
  str.split('').forEach(letter => {
    for (let pointValue in ranking) {
      if (ranking[pointValue].includes(letter)) {
        total += parseInt(pointValue);
        break;
      }
    }
  });

  return total;
};
